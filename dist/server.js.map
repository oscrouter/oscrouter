{"version":3,"sources":["../server.js"],"names":["io","require","port","fs","listen","logger","log","allRoutes","JSON","parse","readFileSync","__dirname","on","socket","console","data","destroyAllRoutes","then","emit","Routes","getRoutes","uuid","of","to","loadRoutes","routes","val","key","next","addRoute"],"mappings":";;AAEA;;;;AACA;;;;AAOA;;;;;;AAVA,MAAMA,KAAKC,QAAQ,WAAR,GAAX;AACA,MAAMC,OAAO,IAAb;;AAGA,MAAMC,KAAKF,QAAQ,IAAR,CAAX;;AAEAD,GAAGI,MAAH,CAAUF,IAAV;;AAEAG,iBAAOC,GAAP,CAAW,OAAX,EAAmB,oCAAoCJ,IAApC,GAA2C,KAA9D;;AAIA,MAAMK,YAAYC,KAAKC,KAAL,CAAWN,GAAGO,YAAH,CAAgBC,YAAU,kBAA1B,CAAX,CAAlB;;AAEAX,GAAGY,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;AACrCC,SAAQR,GAAR,CAAY,aAAZ;;AAEAO,QAAOD,EAAP,CAAU,OAAV,EAAmB,UAASG,IAAT,EAAe;AACjCC,qBACCC,IADD,CACOF,IAAD,IAAU;AACfF,UAAOK,IAAP,CAAY,eAAZ,EAA4BC,iBAAOC,SAAP,EAA5B;AACA,GAHD;AAIA,EALD;;AAOAP,QAAOD,EAAP,CAAU,QAAV,EAAoB,UAASG,IAAT,EAAe;AAClCD,UAAQR,GAAR,CAAYa,iBAAOC,SAAP,EAAZ;AACA,EAFD;AAGA,CAbD;;AAeA;AACAD,iBAAOP,EAAP,CAAU,gBAAV,EAA4BS,IAAD,IAAU;AACpCrB,IAAGsB,EAAH,CAAM,QAAN,EAAgBC,EAAhB,CAAmBF,IAAnB,EAAyBH,IAAzB,CAA8B,UAA9B,EAA0C,IAA1C;AACA,CAFD;;AAIAC,iBAAOP,EAAP,CAAU,gBAAV,EAA4BS,IAAD,IAAU;AACpCrB,IAAGsB,EAAH,CAAM,QAAN,EAAgBC,EAAhB,CAAmBF,IAAnB,EAAyBH,IAAzB,CAA8B,UAA9B,EAA0C,IAA1C;AACA,CAFD;;AAIAM,WAAWjB,SAAX;;AAEA,SAASiB,UAAT,CAAoBC,MAApB,EAA4B;AAC3B,6BACCA,MADD,EAEC,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACnBT,mBAAOU,QAAP,CAAgBF,GAAhB,EAAqBD,GAArB;AACAE;AACA,EALF;AAOA","file":"server.js","sourcesContent":["const io = require('socket.io')()\nconst port = 1337\nimport eachOfSeries from 'async/eachOfSeries';\nimport logger from './lib/logger';\nconst fs = require('fs')\n\nio.listen(port)\n\nlogger.log('debug','Socket.io is listening on port ' + port + '...')\n\nimport Routes from './Routes.js';\n\nconst allRoutes = JSON.parse(fs.readFileSync(__dirname+'/persistent.json'));\n\nio.on('connection', function (socket) {\n\tconsole.log(\"connection!\");\n\n\tsocket.on('apply', function(data) {\n\t\tdestroyAllRoutes()\n\t\t.then((data) => {\n\t\t\tsocket.emit('routesapplied',Routes.getRoutes());\n\t\t})\n\t})\n\n\tsocket.on('routes', function(data) {\n\t\tconsole.log(Routes.getRoutes())\n\t})\n})\n\n//https://socket.io/docs/emit-cheatsheet/\nRoutes.on('outgoingpacket',(uuid) => {\n\tio.of('routes').to(uuid).emit('incoming', true);\n})\n\nRoutes.on('incomingpacket',(uuid) => {\n\tio.of('routes').to(uuid).emit('outgoing', true);\n})\n\nloadRoutes(allRoutes)\n\nfunction loadRoutes(routes) {\n\teachOfSeries(\n\t\troutes,\n\t\t(val, key, next) => {\n\t\t\tRoutes.addRoute(key, val)\n\t\t\tnext();\n\t\t}\n\t)\n}\n"]}