{"version":3,"sources":["../Routes.js"],"names":["Routes","EventEmitter","constructor","routes","servers","getServer","type","ip","port","sha","getSha","server","Servers","addUDPPort","addTCPServer","addTCPClient","err","on","message","timeTag","remoteInfo","localInfo","getRoutes","addRoute","uuid","settings","incomingport","length","incomingip","incomingtype","incomingsha","outgoingtype","outgoingsha","outgoingip","outgoingport","replaceRoutes","destroyAllRoutes","Promise","resolve","reject","socket","next","close","sockets","socketType","logger","log","address","args","route","emit","sendersha","i","routeParser","incomingpath","params","match","o","outgoingpath","reverse","send","stype"],"mappings":"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","file":"Routes.js","sourcesContent":["import Servers from './Servers.js';\nimport sha256 from 'sha256';\nimport eachOfSeries from 'async/eachOfSeries';\nimport eachOf from 'async/eachOf';\nimport routeParser from 'route-parser';\nimport logger from './lib/logger';\nimport EventEmitter from 'events';\n\nclass Routes extends EventEmitter {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.routes = {}\n\t\tthis.servers = {}\n\t}\n\n\tgetServer(type, ip, port) {\n\t\tconst sha = this.getSha(type, ip, port)\n\t\tif(this.servers[sha]) {\n\t\t\treturn this.servers[sha];\n\t\t}\n\t\tlet server = null\n\t\tswitch(type) {\n\t\t\tcase 'udp':\n\t\t\t\tserver = Servers.addUDPPort(ip, port)\n\t\t\tbreak;\n\t\t\tcase 'tcpserver':\n\t\t\t\tserver = Servers.addTCPServer(ip, port)\n\t\t\tbreak;\n\t\t\tcase 'tcpclient':\n\t\t\t\tserver = Servers.addTCPClient(ip, port)\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconst err = `Invalid Server Type ${type}!`\n\t\t\t\tthrow err\n\t\t\tbreak;\n\t\t}\n\n\t\tserver.on(\n\t\t\t\"message\",\n\t\t\t(message, timeTag, remoteInfo, localInfo, type) => {\n\t\t\t\tthis.message(message, timeTag, remoteInfo, localInfo, type, sha)\n\t\t\t}\n\t\t)\n\n\t\tthis.servers[sha] = server\n\t}\n\n\tgetRoutes() {\n\t\treturn this.routes;\n\t}\n\n\taddRoute(uuid, settings) {\n\t\tif(!settings.incomingport.length) {\n\t\t\tthrow \"Incoming Port is REQUIRED\"\n\t\t}\n\t\tconst incomingip = settings.incomingip.length ? settings.incomingip : '0.0.0.0'\n\t\tconst incomingport = settings.incomingport\n\t\tconst incomingtype = settings.incomingtype\n\t\tconst incomingsha = this.getSha(incomingtype,incomingip,incomingport)\n\t\tthis.getServer(incomingtype,incomingip,incomingport)\n\n\t\t//Theres no need to create a specific outgoing udp since its udp\n\t\tif(settings.outgoingtype === 'udp') {\n\t\t\tsettings.outgoingsha = incomingsha\n\t\t} else {\n\t\t\tconst outgoingip = settings.outgoingip.length ? settings.outgoingip : incomingip\n\t\t\tconst outgoingport = settings.outgoingport.length ? settings.outgoingport : incomingport\n\t\t\tconst outgoingtype = settings.outgoingtype.length ? settings.outgoingtype : incomingtype\n\t\t\tconst outgoingsha = this.getSha(outgoingtype,outgoingip,outgoingport)\n\t\t\tthis.getServer(outgoingtype,outgoingip,outgoingport)\n\t\t\tsettings.outgoingsha = outgoingsha\n\t\t}\n\n\t\tsettings.incomingsha = incomingsha\n\n\t\tif(!this.routes[incomingsha]) {\n\t\t\tthis.routes[incomingsha] = {}\n\t\t}\n\t\tthis.routes[incomingsha][uuid] = settings\n\t}\n\n\treplaceRoutes(routes) {\n\t\t\n\t}\n\n\tdestroyAllRoutes() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\teachOfSeries(\n\t\t\t\tthis.servers,\n\t\t\t\t(socket, sha, next) => {\n\t\t\t\t\tsocket.close()\n\t\t\t\t\tnext()\n\t\t\t\t}, (err) => {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tdelete(this.sockets)\n\t\t\t\t\tthis.sockets = {}\n\t\t\t\t\tdelete(this.routes)\n\t\t\t\t\tthis.routes = {}\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t);\n\t\t})\n\t\t\n\t}\n\n\tmessage(message, timeTag, remoteInfo, localInfo, type, sha) {\n\n\t\tlet socketType = (type === 'udp' ) ? 'UDP' : 'TCP'\n\t\tlogger.log('debug',`A ${socketType} OSC message just arrived from ${remoteInfo.address} to ${localInfo.port}`, {address: message.address, args: message.args, timeTag})\n\n\t\tconst routes = this.routes[sha]\n\n\t\teachOf(\n\t\t\troutes,\n\t\t\t(route, uuid, next) => {\n\t\t\t\tthis.emit('incomingpacket',uuid)\n\t\t\t\tconst sendersha = route.outgoingsha\n\t\t\t\tconst i = new routeParser(route.incomingpath)\n\t\t\t\tconst params = i.match(message.address)\n\t\t\t\tif(!params) {\n\t\t\t\t\tnext()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst o = new routeParser(route.outgoingpath)\n\t\t\t\tif(route.outgoingtype === 'udp') {\n\t\t\t\t\tif(route.incomingip.length && route.incomingip !== remoteInfo.address) {\n\t\t\t\t\t\tnext()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tconst outgoingip = route.outgoingip.length ? route.outgoingip : remoteInfo.address\n\t\t\t\t\tconst outgoingport = route.outgoingport.length ? route.outgoingport : localInfo.port\n\t\t\t\t\tlogger.log('debug',`Sending UDP OSC message to ${outgoingip}:${outgoingport}`,{address: o.reverse(params), args: message.args})\n\t\t\t\t\tthis.servers[sendersha].send(o.reverse(params), message.args, outgoingip, outgoingport);\n\t\t\t\t\tthis.emit('outgoingpacket',uuid)\n\t\t\t\t} else {\n\t\t\t\t\tlet stype = route.outgoingtype === 'tcpserver' ? 'clients' : 'server'\n\t\t\t\t\tlogger.log('debug',`Sending TCP OSC message to ${stype}`,{address: o.reverse(params), args: message.args})\n\t\t\t\t\tthis.servers[sendersha].send(o.reverse(params), message.args);\n\t\t\t\t\tthis.emit('outgoingpacket',uuid)\n\t\t\t\t}\n\n\t\t\t\tnext()\n\t\t\t}\n\t\t)\n\t}\n\n\tgetSha(type,ip,port) {\n\t\treturn sha256(type+ip+port);\n\t}\n}\nexport default new Routes()"]}