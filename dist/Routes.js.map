{"version":3,"sources":["../src/Routes.js"],"names":["Routes","EventEmitter","constructor","routes","servers","getServer","type","ip","port","sha","getSha","server","Servers","addUDPPort","addTCPServer","addTCPClient","err","on","message","timeTag","remoteInfo","localInfo","getRoutes","addRoute","uuid","settings","incomingport","length","incomingip","incomingtype","incomingsha","outgoingtype","outgoingsha","outgoingip","outgoingport","replaceRoutes","destroyAllRoutes","Promise","resolve","reject","socket","next","close","sockets","socketType","logger","log","address","args","route","emit","sendersha","i","routeParser","incomingpath","params","match","o","outgoingpath","reverse","send","stype"],"mappings":"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","sourcesContent":["import Servers from './Servers.js';\nimport sha256 from 'sha256';\nimport eachOfSeries from 'async/eachOfSeries';\nimport eachOf from 'async/eachOf';\nimport routeParser from 'route-parser';\nimport logger from './lib/logger';\nimport EventEmitter from 'events';\n\nclass Routes extends EventEmitter {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.routes = {}\n\t\tthis.servers = {}\n\t}\n\n\tgetServer(type, ip, port) {\n\t\tconst sha = this.getSha(type, ip, port)\n\t\tif(this.servers[sha]) {\n\t\t\treturn this.servers[sha];\n\t\t}\n\t\tlet server = null\n\t\tswitch(type) {\n\t\t\tcase 'udp':\n\t\t\t\tserver = Servers.addUDPPort(ip, port)\n\t\t\tbreak;\n\t\t\tcase 'tcpserver':\n\t\t\t\tserver = Servers.addTCPServer(ip, port)\n\t\t\tbreak;\n\t\t\tcase 'tcpclient':\n\t\t\t\tserver = Servers.addTCPClient(ip, port)\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconst err = `Invalid Server Type ${type}!`\n\t\t\t\tthrow err\n\t\t\tbreak;\n\t\t}\n\n\t\tserver.on(\n\t\t\t\"message\",\n\t\t\t(message, timeTag, remoteInfo, localInfo, type) => {\n\t\t\t\tthis.message(message, timeTag, remoteInfo, localInfo, type, sha)\n\t\t\t}\n\t\t)\n\n\t\tthis.servers[sha] = server\n\t}\n\n\tgetRoutes() {\n\t\treturn this.routes;\n\t}\n\n\taddRoute(uuid, settings) {\n\t\tif(!settings.incomingport.length) {\n\t\t\tthrow \"Incoming Port is REQUIRED\"\n\t\t}\n\t\tconst incomingip = settings.incomingip.length ? settings.incomingip : '0.0.0.0'\n\t\tconst incomingport = settings.incomingport\n\t\tconst incomingtype = settings.incomingtype\n\t\tconst incomingsha = this.getSha(incomingtype,incomingip,incomingport)\n\t\tthis.getServer(incomingtype,incomingip,incomingport)\n\n\t\t//Theres no need to create a specific outgoing udp since its udp\n\t\tif(settings.outgoingtype === 'udp') {\n\t\t\tsettings.outgoingsha = incomingsha\n\t\t} else {\n\t\t\tconst outgoingip = settings.outgoingip.length ? settings.outgoingip : incomingip\n\t\t\tconst outgoingport = settings.outgoingport.length ? settings.outgoingport : incomingport\n\t\t\tconst outgoingtype = settings.outgoingtype.length ? settings.outgoingtype : incomingtype\n\t\t\tconst outgoingsha = this.getSha(outgoingtype,outgoingip,outgoingport)\n\t\t\tthis.getServer(outgoingtype,outgoingip,outgoingport)\n\t\t\tsettings.outgoingsha = outgoingsha\n\t\t}\n\n\t\tsettings.incomingsha = incomingsha\n\n\t\tif(!this.routes[incomingsha]) {\n\t\t\tthis.routes[incomingsha] = {}\n\t\t}\n\t\tthis.routes[incomingsha][uuid] = settings\n\t}\n\n\treplaceRoutes(routes) {\n\t\t\n\t}\n\n\tdestroyAllRoutes() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\teachOfSeries(\n\t\t\t\tthis.servers,\n\t\t\t\t(socket, sha, next) => {\n\t\t\t\t\tsocket.close()\n\t\t\t\t\tnext()\n\t\t\t\t}, (err) => {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tdelete(this.sockets)\n\t\t\t\t\tthis.sockets = {}\n\t\t\t\t\tdelete(this.routes)\n\t\t\t\t\tthis.routes = {}\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t);\n\t\t})\n\t\t\n\t}\n\n\tmessage(message, timeTag, remoteInfo, localInfo, type, sha) {\n\n\t\tlet socketType = (type === 'udp' ) ? 'UDP' : 'TCP'\n\t\tlogger.log('debug',`A ${socketType} OSC message just arrived from ${remoteInfo.address} to ${localInfo.port}`, {address: message.address, args: message.args, timeTag})\n\n\t\tconst routes = this.routes[sha]\n\n\t\teachOf(\n\t\t\troutes,\n\t\t\t(route, uuid, next) => {\n\t\t\t\tthis.emit('incomingpacket',uuid)\n\t\t\t\tconst sendersha = route.outgoingsha\n\t\t\t\tconst i = new routeParser(route.incomingpath)\n\t\t\t\tconst params = i.match(message.address)\n\t\t\t\tif(!params) {\n\t\t\t\t\tnext()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst o = new routeParser(route.outgoingpath)\n\t\t\t\tif(route.outgoingtype === 'udp') {\n\t\t\t\t\tif(route.incomingip.length && route.incomingip !== remoteInfo.address) {\n\t\t\t\t\t\tnext()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tconst outgoingip = route.outgoingip.length ? route.outgoingip : remoteInfo.address\n\t\t\t\t\tconst outgoingport = route.outgoingport.length ? route.outgoingport : localInfo.port\n\t\t\t\t\tlogger.log('debug',`Sending UDP OSC message to ${outgoingip}:${outgoingport}`,{address: o.reverse(params), args: message.args})\n\t\t\t\t\tthis.servers[sendersha].send(o.reverse(params), message.args, outgoingip, outgoingport);\n\t\t\t\t\tthis.emit('outgoingpacket',uuid)\n\t\t\t\t} else {\n\t\t\t\t\tlet stype = route.outgoingtype === 'tcpserver' ? 'clients' : 'server'\n\t\t\t\t\tlogger.log('debug',`Sending TCP OSC message to ${stype}`,{address: o.reverse(params), args: message.args})\n\t\t\t\t\tthis.servers[sendersha].send(o.reverse(params), message.args);\n\t\t\t\t\tthis.emit('outgoingpacket',uuid)\n\t\t\t\t}\n\n\t\t\t\tnext()\n\t\t\t}\n\t\t)\n\t}\n\n\tgetSha(type,ip,port) {\n\t\treturn sha256(type+ip+port);\n\t}\n}\nexport default new Routes()"],"file":"Routes.js"}