{"version":3,"sources":["../../lib/TCPClient.js"],"names":["TCPClient","SocketServer","constructor","bind","port","ready","type","client","osc","TCPSocketPort","address","on","oscBundle","timeTag","info","bundle","message","error","readyEvent","data","raw","open","getType","close","logger","log","err","console","emit","send","args","warn"],"mappings":"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","sourcesContent":["import SocketServer from './SocketServer.js'\nimport osc from 'osc'\nimport logger from './logger.js'\n\nexport default class TCPClient extends SocketServer {\n\tconstructor(bind, port) {\n\t\tsuper(bind, port)\n\n\t\tthis.ready = false\n\t\tthis.bind = bind\n\t\tthis.port = port\n\t\tthis.type = 'tcpclient'\n\n\t\tthis.client = new osc.TCPSocketPort({\n\t\t\taddress: bind,\n\t\t\tport: port\n\t\t});\n\n\t\tthis.client.on(\n\t\t\t\"bundle\",\n\t\t\t(oscBundle, timeTag, info) => {\n\t\t\t\tthis.bundle(oscBundle, timeTag, {address: this.bind, port: this.port})\n\t\t\t}\n\t\t)\n\n\t\tthis.client.on(\n\t\t\t\"message\",\n\t\t\t(message, timeTag, info) => {\n\t\t\t\tthis.message(message, timeTag, {address: this.bind, port: this.port})\n\t\t\t}\n\t\t)\n\n\t\tthis.client.on(\n\t\t\t\"error\",\n\t\t\tthis.error.bind(this)\n\t\t)\n\n\t\tthis.client.on(\n\t\t\t\"ready\",\n\t\t\tthis.readyEvent.bind(this)\n\t\t)\n\n\t\tthis.client.on(\n\t\t\t\"raw\",\n\t\t\t(data, info) => {\n\t\t\t\tthis.raw(data, info, {address: this.bind, port: this.port})\n\t\t\t}\n\t\t)\n\n\t\tthis.client.on(\n\t\t\t\"close\",\n\t\t\t() => {\n\t\t\t\tthis.ready = false\n\t\t\t}\n\t\t)\n\n\t\tthis.client.open();\n\t}\n\n\tgetType() {\n\t\treturn this.type\n\t}\n\n\topen() {\n\t\tthis.client.open()\n\t}\n\n\tclose() {\n\t\tthis.client.close()\n\t}\n\n\treadyEvent() {\n\t\tthis.ready = true\n\t\tlogger.log('debug',`TCP Client is connected to ${this.bind}:${this.port}`)\n\t}\n\n\terror(err) {\n\t\tconsole.error(err)\n\t}\n\n\traw(data, info) {\n\t\tthis.emit('raw', data, info, {address: this.bind, port: this.port}, this.type)\n\t}\n\n\tbundle(oscBundle, timeTag, info) {\n\t\tthis.emit('bundle', oscBundle, timeTag, info, {address: this.bind, port: this.port}, this.type)\n\t}\n\n\tmessage(message, timeTag, info) {\n\t\tthis.emit('message', message, timeTag, info, {address: this.bind, port: this.port}, this.type)\n\t}\n\n\tsend(address, args) {\n\t\tif(!this.ready) {\n\t\t\tconsole.warn(\"The server is not ready to send messages\")\n\t\t\treturn\n\t\t}\n\t\tthis.client.send({\n\t\t\taddress,\n\t\t\targs\n\t\t});\n\t}\n}"],"file":"TCPClient.js"}