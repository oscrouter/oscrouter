{"version":3,"sources":["../../lib/TCPServer.js"],"names":["TCPServer","SocketServer","constructor","bind","port","ready","type","clients","netServer","net","createServer","socket","uuid","client","osc","TCPSocketPort","logger","log","on","message","timeTag","info","address","remoteAddress","remotePort","oscBundle","bundle","error","data","raw","open","getType","listen","close","err","console","emit","send","args","next"],"mappings":"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","sourcesContent":["import SocketServer from './SocketServer.js'\nimport osc from 'osc'\nimport net from 'net'\nimport uuidv4 from 'uuid/v4';\nimport each from 'async/each';\nimport logger from './logger.js'\n\nexport default class TCPServer extends SocketServer {\n\tconstructor(bind, port) {\n\t\tsuper(bind, port)\n\n\t\tthis.ready = false\n\t\tthis.bind = bind\n\t\tthis.port = port\n\t\tthis.type = 'tcpserver'\n\t\tthis.clients = []\n\n\t\tthis.netServer = net.createServer((socket) => {\n\t\t\tconst uuid = uuidv4()\n\t\t\tconst client = new osc.TCPSocketPort({\n\t\t\t\tsocket: socket\n\t\t\t});\n\n\t\t\tlogger.log('debug',`TCP Client connected to ${this.bind}:${this.port}`)\n\n\t\t\tclient.on(\n\t\t\t\t\"close\",\n\t\t\t\t() => {\n\t\t\t\t\tlogger.log('debug',`TCP Client disconnected from ${this.bind}:${this.port}`)\n\t\t\t\t\tdelete(this.clients[uuid])\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tclient.on(\n\t\t\t\t\"ready\",\n\t\t\t\t() => {\n\t\t\t\t\tthis.clients[uuid] = client\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tclient.on(\n\t\t\t\t\"message\",\n\t\t\t\t(message, timeTag, info) => {\n\t\t\t\t\tthis.message(message, timeTag, {address: socket.remoteAddress, port: socket.remotePort})\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tclient.on(\n\t\t\t\t\"bundle\",\n\t\t\t\t(oscBundle, timeTag, info) => {\n\t\t\t\t\tthis.bundle(oscBundle, timeTag, {address: socket.remoteAddress, port: socket.remotePort})\n\t\t\t\t}\n\t\t\t)\n\n\n\t\t\tclient.on(\n\t\t\t\t\"error\",\n\t\t\t\tthis.error.bind(this)\n\t\t\t)\n\n\t\t\tclient.on(\n\t\t\t\t\"raw\",\n\t\t\t\t(data, info) => {\n\t\t\t\t\tthis.raw(data, info, {address: socket.remoteAddress, port: socket.remotePort})\n\t\t\t\t}\n\t\t\t)\n\n\t\t});\n\t\tthis.open();\n\t}\n\n\tgetType() {\n\t\treturn this.type\n\t}\n\n\topen() {\n\t\tthis.netServer.listen(this.port, this.bind, () => {\n\t\t\tthis.ready = true\n\t\t\tlogger.log('debug',`TCP Server is listening on ${this.bind}:${this.port}`)\n\t\t});\n\t}\n\n\tclose() {\n\t\tthis.netServer.close()\n\t}\n\n\terror(err) {\n\t\tconsole.error(err)\n\t}\n\n\traw(data, info) {\n\t\tthis.emit('raw', data, info, {address: this.bind, port: this.port}, this.type)\n\t}\n\n\tbundle(oscBundle, timeTag, info) {\n\t\tthis.emit('bundle', oscBundle, timeTag, info, {address: this.bind, port: this.port}, this.type)\n\t}\n\n\tmessage(message, timeTag, info) {\n\t\tthis.emit('message', message, timeTag, info, {address: this.bind, port: this.port}, this.type)\n\t}\n\n\tsend(address, args) {\n\t\teach(\n\t\t\tthis.clients,\n\t\t\t(client, next) => {\n\t\t\t\tclient.send({\n\t\t\t\t\taddress,\n\t\t\t\t\targs\n\t\t\t\t});\n\t\t\t\tnext();\n\t\t\t}\n\t\t)\n\t}\n}"],"file":"TCPServer.js"}